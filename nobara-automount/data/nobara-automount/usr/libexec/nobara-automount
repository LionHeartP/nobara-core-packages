#!/bin/bash
set -euo pipefail

log() { echo "[nobara-automount] $*"; }

if [[ ${USER:-} != "liveuser" ]]; then
  if [[ $EUID -ne 0 ]]; then
    if ! id -nG "${USER}" | grep -qw wheel; then
      log "User ${USER} is not in wheel group. Non-admin users cannot mount drives. Exiting."
      exit 0
    fi
    log "Re-executing via pkexec for user ${USER}…"
    exec pkexec "$(realpath "$0")" "$USER"
  fi

  rwuser="${1:-${SUDO_USER:-${USER}}}"
  if [[ -z "${rwuser}" ]]; then
    log "Could not determine target user for mounts."
    exit 1
  fi
  RW_UID="$(id -u "$rwuser")"
  RW_GID="$(id -g "$rwuser")"
  log "Mounts will be owned by ${rwuser} (uid=${RW_UID}, gid=${RW_GID})."

  get_mount_opts() {
    local fstype="$1"
    local devpath="$2"
    local opts=""
    case "$fstype" in
      ext4|xfs|ext3|ext2)
        opts="rw,noatime,lazytime"
        ;;
      f2fs)
        if [[ ! -f /etc/filesystems ]] || ! grep -q '\bf2fs\b' /etc/filesystems; then
          echo "f2fs" >> /etc/filesystems
        fi
        opts="rw,noatime,lazytime,compress_algorithm=zstd,compress_chksum,atgc,gc_merge"
        ;;
      btrfs)
        opts="rw,noatime,lazytime,compress-force=zstd,space_cache=v2,autodefrag,ssd_spread"
        local tmpmp="/run/media/${rwuser}/.btrfs_probe.$$"
        mkdir -p "$tmpmp"
        if mount -t btrfs -o ro "$devpath" "$tmpmp" 2>/dev/null; then
          local sub="@"
          if [[ -d "$tmpmp/$sub" ]] && btrfs subvolume show "$tmpmp/$sub" &>/dev/null; then
            opts+=",subvol=${sub}"
          fi
          umount -l "$tmpmp" || true
        fi
        rmdir "$tmpmp" 2>/dev/null || true
        ;;
      vfat)
        opts="rw,noatime,lazytime,uid=${RW_UID},gid=${RW_GID},utf8=1"
        ;;
      exfat)
        opts="rw,noatime,lazytime,uid=${RW_UID},gid=${RW_GID}"
        ;;
      ntfs)
        # FUSE ntfs-3g → drop unsupported options
        opts="rw,noatime,lazytime,uid=${RW_UID},gid=${RW_GID},big_writes,umask=0022"
        ;;
      *)
        opts="rw,noatime,lazytime"
        ;;
    esac
    printf '%s' "$opts"
  }

  # Clean empty stale dirs under /run/media/$rwuser
  if [[ -d "/run/media/$rwuser" ]]; then
    while IFS= read -r mountpoint; do
      if ! lsblk | awk '{print $7}' | grep -qx -- "/run/media/$rwuser/$mountpoint"; then
        if [[ -d "/run/media/$rwuser/$mountpoint" && -z "$(ls -A "/run/media/$rwuser/$mountpoint" 2>/dev/null || true)" ]]; then
          log "Removing stale mount dir /run/media/$rwuser/$mountpoint"
          rm -rf -- "/run/media/$rwuser/$mountpoint"
        fi
      fi
    done < <(ls -1 "/run/media/$rwuser" 2>/dev/null || true)
  fi

  # Enumerate candidate partitions
  while IFS= read -r line; do
    typ="$(awk '{print $1}' <<<"$line")"
    uuid="$(awk '{print $2}' <<<"$line")"
    fstype="$(awk '{print $3}' <<<"$line")"
    mntp="$(awk '{print $4}' <<<"$line")"

    [[ "$typ" == "part" ]] || continue
    [[ -n "$uuid" ]] || continue
    [[ -z "$mntp" ]] || continue
    [[ "$fstype" != "crypto_LUKS" ]] || continue

    partition_name="$uuid"
    tomount="/dev/disk/by-uuid/$partition_name"
    [[ -n "$fstype" ]] || continue

    # ---- Relaxed allow-list check (matches your original behavior) ----
    if [[ -f /etc/nobara/automount/enabled.conf ]]; then
      if ! grep -Fq "$partition_name" /etc/nobara/automount/enabled.conf; then
        log "Skipping $partition_name ($fstype): not in enabled.conf"
        continue
      fi
    else
      log "enabled.conf not found; skipping $partition_name (preserving original behavior)"
      continue
    fi
    # -------------------------------------------------------------------

    install -d -m 0755 -o "$RW_UID" -g "$RW_GID" "/run/media/$rwuser/$partition_name"

    if [[ "$fstype" == "ntfs" ]]; then
      ntfsfix "$tomount" &>/dev/null || true
    fi

    mountopts="$(get_mount_opts "$fstype" "$tomount")"
    log "Mounting $tomount as $fstype -> /run/media/$rwuser/$partition_name with -o $mountopts"

    if ! mount -t "$fstype" -o "$mountopts" "$tomount" "/run/media/$rwuser/$partition_name" 2>/dev/null; then
      if [[ "$fstype" == "ntfs" ]]; then
        mount -t ntfs-3g -o "$mountopts" "$tomount" "/run/media/$rwuser/$partition_name"
      else
        log "Failed to mount $tomount as $fstype."
        rmdir "/run/media/$rwuser/$partition_name" 2>/dev/null || true
        continue
      fi
    fi

    case "$fstype" in
      btrfs|ext4|ext3|ext2|xfs|f2fs)
        chown "$RW_UID:$RW_GID" "/run/media/$rwuser/$partition_name" || true
        ;;
    esac

    log "Mounted $tomount ($fstype) at /run/media/$rwuser/$partition_name"
  done < <(lsblk -rno TYPE,UUID,FSTYPE,MOUNTPOINT | grep '^part ')
fi
