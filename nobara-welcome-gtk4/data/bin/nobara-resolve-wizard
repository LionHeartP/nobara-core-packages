#!/usr/bin/python3

import gi
import zipfile
import os
import pwd
import subprocess
import shutil
import sys

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib

class DaVinciInstaller(Gtk.Application):
    def __init__(self):
        super().__init__(application_id="org.nobaraproject.policykit.davinciresolve.wizard.install")
        self.window = None

        # Check if running as root, if not, re-run with pkexec
        if os.geteuid() != 0:
            print("Re-running with pkexec...")
            env = os.environ.copy()
            env['DISPLAY'] = os.environ.get('DISPLAY', '')
            env['XAUTHORITY'] = os.environ.get('XAUTHORITY', '')
            env['REALUSER'] = os.environ.get('USER', '')
            subprocess.run(["pkexec", "env", f"DISPLAY={env['DISPLAY']}", f"XAUTHORITY={env['XAUTHORITY']}", f"REALUSER={env['REALUSER']}", sys.executable] + sys.argv)
            return

    def do_activate(self):
        if not self.window:
            self.window = Gtk.ApplicationWindow(application=self)
            self.window.set_title("DaVinci Resolve Installer/Updater")
            self.window.set_default_size(400, 200)

            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            self.window.add(vbox)

            instruction_label = Gtk.Label(label="Download DaVinci Resolve from the link below and select the downloaded file.")
            vbox.pack_start(instruction_label, True, True, 0)

            download_link = Gtk.LinkButton(uri="https://www.blackmagicdesign.com/products/davinciresolve", label="Download DaVinci Resolve")
            download_link.connect("clicked", self.on_download_link_clicked)
            vbox.pack_start(download_link, True, True, 0)

            select_button = Gtk.Button(label="Select Downloaded File")
            select_button.connect("clicked", self.on_file_select)
            vbox.pack_start(select_button, True, True, 0)

            self.window.show_all()

    def on_download_link_clicked(self, widget):
        real_user = os.environ.get('REALUSER', '')
        if not real_user:
            self.show_error_dialog("REALUSER environment variable is not set.")
            return

        # Command to open the URL in the default web browser
        url = "https://www.blackmagicdesign.com/products/davinciresolve"
        try:
            subprocess.run(["sudo", "-u", real_user, "xdg-open", url], check=True)
        except Exception as e:
            self.show_error_dialog(f"Failed to open the link: {str(e)}")

    def on_file_select(self, widget):
        real_user = os.environ.get('REALUSER', '')
        if not real_user:
            self.show_error_dialog("REALUSER environment variable is not set.")
            return

        # Get the REALUSER's home directory
        user_info = pwd.getpwnam(real_user)
        user_home = user_info.pw_dir

        dialog = Gtk.FileChooserDialog(
            title="Select ZIP File",
            parent=self.window,
            action=Gtk.FileChooserAction.OPEN,
        )
        dialog.add_buttons(
            Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
            Gtk.STOCK_OPEN, Gtk.ResponseType.OK
        )

        # Set the initial directory to the REALUSER's home directory
        dialog.set_current_folder(user_home)

        filter_zip = Gtk.FileFilter()
        filter_zip.set_name("ZIP files")
        filter_zip.add_pattern("*.zip")
        dialog.add_filter(filter_zip)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            zip_path = dialog.get_filename()
            dialog.destroy()  # Close the file chooser dialog
            try:
                self.run_installer(zip_path)
            except Exception as e:
                self.show_error_dialog(str(e))
        else:
            dialog.destroy()

    def run_installer(self, zip_path):
        # Show status dialog
        status_dialog = Gtk.MessageDialog(
            transient_for=self.window,
            flags=0,
            message_type=Gtk.MessageType.INFO,
            buttons=Gtk.ButtonsType.NONE,
            text="Running DaVinci Resolve installer...",
        )
        status_dialog.show()

        try:
            self.extract_and_install(zip_path)
            status_dialog.destroy()
            self.show_info_dialog("DaVinci Resolve installed successfully!")
        except Exception as e:
            status_dialog.destroy()
            self.show_error_dialog(str(e))

    def extract_and_install(self, zip_path):
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            extract_path = os.path.join(os.path.dirname(zip_path), "extracted")
            zip_ref.extractall(extract_path)

        run_file = None
        for root, dirs, files in os.walk(extract_path):
            for file in files:
                if file.endswith(".run"):
                    run_file = os.path.join(root, file)
                    break

        if not run_file:
            raise FileNotFoundError("No .run file found in the extracted contents.")

        # Step 1: Install necessary packages as root
        subprocess.run(["dnf", "install", "-y", "rocm-meta", "nobara-resolve-runtime", "zlib"], check=True)

        # Step 2: Run the .run file as the user
        os.chmod(run_file, 0o755)
        real_user = os.environ.get('REALUSER', '')
        if not real_user:
            raise EnvironmentError("REALUSER environment variable is not set.")
        subprocess.run(["sudo", "-u", real_user, "bash", "-c", f"SKIP_PACKAGE_CHECK=1 {run_file}"], check=True)

        # Step 3: Modify the desktop entry as root
        desktop_file = "/usr/share/applications/com.blackmagicdesign.resolve.desktop"
        if os.path.exists(desktop_file):
            subprocess.run(["sed", "-i", 's|Exec=.*|Exec=/usr/bin/davinci-resolve|', desktop_file], check=True)
        else:
            raise FileNotFoundError("Desktop entry file not found.")

        # Step 4: Copy the desktop entry to the user's Desktop
        user_info = pwd.getpwnam(real_user)
        user_home = user_info.pw_dir
        user_desktop = os.path.join(user_home, "Desktop")
        shutil.copy(desktop_file, user_desktop)

        # Step 5: Bypass the Davinci Resolve new install Welcome/Onboarding screen
        config_dir = os.path.join(user_home, '.local', 'share', 'DaVinciResolve', 'configs')
        version_file = os.path.join(config_dir, '.version')
        subprocess.run(["chown", "-R", real_user + ":" + real_user, os.path.join(user_home, '.local', 'share', 'DaVinciResolve')], check=True)

        # Create the directory structure
        os.makedirs(config_dir, exist_ok=True)

        # Write the version information to the file
        with open(version_file, 'w') as file:
            file.write("Onboarding.Version=100000")

    def show_error_dialog(self, message):
        dialog = Gtk.MessageDialog(
            transient_for=self.window,
            flags=0,
            message_type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.CLOSE,
            text="Error",
        )
        dialog.format_secondary_text(message)
        dialog.run()
        dialog.destroy()

    def show_info_dialog(self, message):
        dialog = Gtk.MessageDialog(
            transient_for=self.window,
            flags=0,
            message_type=Gtk.MessageType.INFO,
            buttons=Gtk.ButtonsType.OK,
            text="Success",
        )
        dialog.format_secondary_text(message)
        dialog.run()
        dialog.destroy()

if __name__ == "__main__":
    app = DaVinciInstaller()
    app.run(None)
