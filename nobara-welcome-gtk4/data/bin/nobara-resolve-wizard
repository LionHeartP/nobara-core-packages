#!/usr/bin/python3

import gi
import zipfile
import os
import pwd
import subprocess
import shutil
import sys
import threading

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib

class DaVinciInstaller(Gtk.Application):
    def __init__(self):
        super().__init__(application_id="org.nobaraproject.policykit.davinciresolve.wizard.install")
        self.window = None

    def do_activate(self):
        if not self.window:
            self.window = Gtk.ApplicationWindow(application=self)
            self.window.set_title("DaVinci Resolve Installer/Updater")
            self.window.set_default_size(400, 200)

            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            self.window.add(vbox)

            instruction_label = Gtk.Label(label="Download DaVinci Resolve from the link below and select the downloaded file.")
            vbox.pack_start(instruction_label, True, True, 0)

            download_link = Gtk.LinkButton(uri="https://www.blackmagicdesign.com/products/davinciresolve", label="Download DaVinci Resolve")
            vbox.pack_start(download_link, True, True, 0)

            select_button = Gtk.Button(label="Select Downloaded File")
            select_button.connect("clicked", self.on_file_select)
            vbox.pack_start(select_button, True, True, 0)

            self.window.show_all()

    def on_file_select(self, widget):

        dialog = Gtk.FileChooserDialog(
            title="Select ZIP File",
            parent=self.window,
            action=Gtk.FileChooserAction.OPEN,
        )
        dialog.add_buttons(
            Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
            Gtk.STOCK_OPEN, Gtk.ResponseType.OK
        )

        filter_zip = Gtk.FileFilter()
        filter_zip.set_name("ZIP files")
        filter_zip.add_pattern("*.zip")
        dialog.add_filter(filter_zip)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            zip_path = dialog.get_filename()
            dialog.destroy()  # Close the file chooser dialog

            # Check if libfuse is installed
            subprocess.run(["ldconfig", "-p"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            if not (os.path.exists("/lib64/libfuse.so.2") or os.path.exists("/usr/lib64/libfuse.so.2")):

                # If not, install fuse-libs
                install_process = subprocess.run(
                    ["pkexec", "dnf", "install", "-y", "fuse-libs"],
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                # Tell user if there's an error
                if install_process.returncode != 0:
                    GLib.idle_add(self.show_error_dialog, f"Failed to install fuse-libs: {install_process.stderr}. Please run 'sudo dnf install fuse-libs' manually.")
                    return

            # Create a thread to run self.run_installer asynchronously
            installer_thread = threading.Thread(target=self.run_installer, args=(zip_path,))
            installer_thread.start()
        else:
            dialog.destroy()

    def run_installer(self, zip_path):

        def on_install_complete(success):
            if success:
                self.show_success_dialog()
            else:
                self.show_error_dialog("An error occurred during DaVinci Resolve installation.")
        # Show status dialog
        status_dialog = Gtk.MessageDialog(
            transient_for=self.window,
            flags=0,
            message_type=Gtk.MessageType.INFO,
            buttons=Gtk.ButtonsType.NONE,
            text="Running DaVinci Resolve installer...",
        )
        status_dialog.show()
        # Start the installer process in a separate thread
        installer_thread = threading.Thread(target=self.extract_and_install, args=(zip_path,))
        installer_thread.start()

        # Wait for the installer to complete
        installer_thread.join(timeout=300)

        # Close the status dialog
        status_dialog.destroy()

        if not installer_thread.is_alive():
            on_install_complete(True)
        else:
            on_install_complete(False)

        # Cleanup step
        extract_path = os.path.join(os.path.dirname(zip_path), "resolve_wizard_extracted")
        try:
            shutil.rmtree(extract_path)
        except Exception as e:
            print(f"Error during cleanup: {e}")

    def run_nobara_resolved_pkexec(self, run_file, shortcut_file):
        def run_command():
            try:
                subprocess.run(
                    ["pkexec", "/usr/libexec/nobara-resolve-pkexec", run_file, shortcut_file],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                    check=True
                )
            except subprocess.CalledProcessError as e:
                self.show_error_dialog(f"An error occurred during Nobara Resolve installation: {e}")

        # Start the command in a separate thread
        thread = threading.Thread(target=run_command)
        thread.start()

        # Wait for the thread to complete
        thread.join(timeout=300)  # Set a timeout of 5 minutes

        if thread.is_alive():
            self.show_error_dialog("The installation process timed out. Please check your internet connection and try again.")

    def extract_and_install(self, zip_path):
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            extract_path = os.path.join(os.path.dirname(zip_path), "resolve_wizard_extracted")
            zip_ref.extractall(extract_path)

        run_file = None
        for root, dirs, files in os.walk(extract_path):
            for file in files:
                if file.endswith(".run"):
                    run_file = os.path.join(root, file)
                    break

        if not run_file:
            raise FileNotFoundError("No .run file found in the extracted contents.")

        # Step 4: Copy the shortcut entry to the user's Desktop and applications menus
        shortcut_file = '/usr/share/applications/com.blackmagicdesign.resolve.desktop'

        ### ROOT REQUIRED ###

        # Call the function to run the pkexec command
        self.run_nobara_resolved_pkexec(run_file, shortcut_file,)

        ### END ROOT REQUIRED ###
        user_home = os.path.expanduser("~")
        desktop_path = os.path.join(user_home, "Desktop")
        shutil.copy(shortcut_file, desktop_path)

        # Step 5: Bypass the Davinci Resolve new install Welcome/Onboarding screen
        config_dir = os.path.join(user_home, '.local', 'share', 'DaVinciResolve', 'configs')
        version_file = os.path.join(config_dir, '.version')

        # Create the directory structure if it doesn't exist
        os.makedirs(config_dir, exist_ok=True)

        # Write the version information to the file
        with open(version_file, 'w') as file:
            file.write("Onboarding.Version=100000")

    def show_success_dialog(self):
        dialog = Gtk.MessageDialog(
            transient_for=self.window,
            destroy_with_parent=True,
            message_type=Gtk.MessageType.INFO,
            buttons=Gtk.ButtonsType.OK,
            text="DaVinci Resolve installed successfully!",
        )
        dialog.connect("response", self.on_dialog_response, dialog)
        dialog.show_all()

    def show_error_dialog(self, message):
        dialog = Gtk.MessageDialog(
            transient_for=self.window,
            flags=0,
            message_type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.CLOSE,
            text="Error",
        )
        dialog.format_secondary_text(message)
        dialog.run()
        dialog.destroy()

    def on_dialog_response(self, widget, response_id, dialog):
        if response_id == Gtk.ResponseType.OK:
            if self.window:
                self.window.destroy()
            Gtk.main_quit()
        dialog.destroy()

if __name__ == "__main__":
    DaVinciInstaller().run(None)
